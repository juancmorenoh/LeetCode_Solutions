'''
Problem: Remove digit from number to maximize result

Difficulty: Easy

Topics: Strings

Description: 
You are given a string number representing a positive integer and a character digit.
Return the resulting string after removing exactly one occurrence of digit from number 
such that the value of the resulting string in decimal form is maximized. 
The test cases are generated such that digit occurs at least once in number.

Example 1:

Input: number = "123", digit = "3"
Output: "12"
Explanation: There is only one '3' in "123". After removing '3', the result is "12".
Example 2:

Input: number = "1231", digit = "1"
Output: "231"
Explanation: We can remove the first '1' to get "231" or remove the second '1' to get "123".
Since 231 > 123, we return "231".
Example 3:

Input: number = "551", digit = "5"
Output: "51"
Explanation: We can remove either the first or second '5' from "551".
Both result in the string "51".

'''

def removeDigit(number,digit):
    # Iterate over the string and find the first occurrence of digit that is followed by a larger digit
    for i in range(len(number) - 1):
        if number[i] == digit and number[i] < number[i + 1]:
            return number[:i] + number[i + 1:] # Remove the digit at index i
        
    # If no such case is found, remove the last occurrence of the digit
    return number[:number.rfind(digit)] + number[number.rfind(digit) + 1:]


number = "3243"
digit = "3"

print(removeDigit(number,digit))